Planned features for Dino. All edit operations should work while the sequencer
is playing (and recording).

Should be done before 0.2:

 [X] Change song length
 [X] Creating and deleting tracks
 [X] Changing track properties (label, MIDI port, MIDI channel)
 [X] Creating and deleting patterns
 [ ] Changing pattern properties (label, length, note resolution, CC resolution)
 [X] Editing note events in patterns
 [/] Editing CC and pitch bend events in patterns
 [X] Arrange patterns
 [X] Add, edit, and delete tempo changes
 [X] Play MIDI note events
 [X] Loading and saving files
 [X] Support for CCA events Save_File, Restore_File, and Quit
 [ ] Play MIDI CC and pitch bend events

Later (before 0.4?):

 [ ] Record MIDI note events
 [ ] Record MIDI CC and pitch bend events
 [ ] Play loops, set loop points
 [ ] Control the sequencer with OSC commands
 [ ] Edit the song with OSC commands
 [ ] Write a Python wrapper for OSC control or embed Python directly
 
Crazy ideas:

 * Redesign the pattern and sequencer classes so there can be different pattern
   types with plugins (DSSI maybe?) that provides editor GUI and sequencing
   for particular pattern types. There could be drum patterns, 303-like 
   monophonic patterns with slide and accent, free-form MIDI event patterns etc.

 * Add OSC sequencing, both for CC-like control values and arbitrary OSC events.

 * Add export to Ogg Vorbis or other audio formats using JACK freewheeling 
   and recording.

 * Write a very small library for attaching metadata like available programs,
   keymappings, controller names to writable MIDI ports and patch some synths
   to use it. Could be useful for showing more userfriendly controller
   editors and track properties, and for selecting pattern types in 
   Crazy idea #1.

 * Make Dino a DSSI synth host? Naah...
