This file contains some information that may be useful if you want to modify
Dino.


WHAT DO YOU WANT TO DO?
=======================
Dino is divided into 4 major parts:

 * libdinoseq - a shared library that contains all the data structures and
                algorithms for storing, modifying and sequencing
                pattern-based songs and provides a framework for undoable
                commands. It depends on libxml++, libglibmm and libjack, 
                but has no GUI code. If you for example want to write a
                KDE or curses version of Dino, this is the library that
                you want to link to.

 * Dino -       a Gtkmm-based GUI program that creates a main window and
                sets up the song and sequencer structures from libdinoseq.
                It does not provide any way to edit or view the song data
                on its own, but it acts as a host for plugins which do that.

 * Plugins -    these are the components that provide the actual editing
                tools, such as the piano roll editor and the arrangement
                editor. They have access to the sequencer and the song data
                through the plugin interface. There are two main ways for 
                plugins to interact with the user:

                  * by providing GUI pages, which are Gtkmm widgets added
                    as pages in the main Notebook widget. These GUI pages
                    can display whatever GUI elements they need in order to
                    interact with the user. All the tabs you see when you
                    start Dino are GUIPages from different plugins. The
                    info editor is a nice and simple example of a plugin
                    with a GUI page.

                  * by providing actions, which basically are bits of code
                    that modify certain types of data in the song. They are
                    registered with the plugin interface and sorted by the
                    type of data they act on, so other plugins with GUI pages
                    can display them in context menus for that data type.
                    All the actions that are available by default are
                    implemented in the core actions plugin.

 * libdinoseq_gui - a small library of widgets that are used by plugins and
                    the main program.

For most hacking purposes writing a plugin should be enough; that is after
all the whole point of having a plugin system. If you want to create a
different pattern editor, for example one that displays the MIDI data in 
classical notation, you can write a plugin that does that and load it instead
of the default pattern editor plugin. Or have both loaded at the same time - 
if they are written properly they should sync automatically.

If you want to do something that requires access to the song data in a way
that isn't available in libdinoseq, or extend the actual data model as opposed
to just the way it's presented and edited, or change something in the 
sequencer, you will have to hack libdinoseq. If you do that, any plugin which
uses the new functions in libdinoseq will obviously not work with the old
version. In this case you should consider sending your changes upstream to the
maintainer of the official Dino repository so they can be merged with the
standard version of libdinoseq. The same goes for Dino and changes to the
plugin system or GUI framework.


ABOUT VERSION NAMES
===================
Dino version names normally consist of 3 numbers separated by points, 
like "0.3.46".

The first number (in this case 0) is the major version number. This is changed
very rarely and indicates some sort of major change.

The second number (in this case 3) is the minor version number. Dino uses the
same convention as the Linux kernel, i.e. odd minor version numbers are used
for development versions, and even minor version numbers are used for releases.

The third number is the patch level. For odd minor version numbers (development
versions) the patch level just indicates a change, usually a Git commit. For
even minor version numbers (releases), the patch level is changed for 
bugfix releases.

If you want to create your own version of Dino you can of course use any
version name you like, but if you want to minimise confusion you could use
the name of the official version you are basing your version on, followed by
a point, a short alphanumerical name, another point and a patch level, like
this:

  0.3.46.mycoolhack.0

If you then make any new changes to your code you name next version
0.3.46.mycoolhack.1, the next one 0.3.46.mycoolhack.2 and so on.

If you write anything interesting I of course want to hear about it!


IF YOU HAVE GIT WRITE ACCESS
============================

BRANCH POLICY
=============
Feel free to create as many branches in the central repository as you like!
Branches are good. They allow you to experiment with complex things without
breaking the main code, and they allow others to track and test your work.
However, in order to keep the build system happy when creating tarballs and
things like that you should tag your branches. The first commit in every new
branch that is not in the parent branch should be tagged using the following
command:

  git tag -a -s Version_BASEVERSION.mybranch.0

where BASEVERSION is the version name of the parent commit (run ./VERSION to
find it) and mybranch is a name for the new branch, which only needs to be
unique among the branches starting from BASEVERSION. For example, if ./VERSION
for the parent commit returns '0.3.220' and you want to name your branch 
'pythongui', you would tag the first commit in the branch with this command:

  git tag -a -s Version_0.3.220.pythongui.0

The VERSION script will then know to call the next commit in this branch 
0.3.220.pythongui.1, the next one after that 0.3.220.pythongui.2 and so on.

When you merge a branch back into its parent branch you need to tag the merge
commit so the VERSION script doesn't get confused. If the commit in the parent
branch just before the merge commit was 0.3.235, you should tag the merge:

  git tag -a -s Version_0.3.236

i.e. you should add 1 to the last number.

You can of course also create branches off other branches than the master,
and then BASEVERSION will still be the version of the parent commit. If you
for example would start a new branch for drawing flashy buttons off the commit
0.3.220.pythongui.12, you should tag the first commit in that new branch with:

  git tag -a -s Version_0.3.220.pythongui.12.flashybuttons.0

The version names tend to get long, but they are very nice and descriptive with
the branch history embedded in them.
