#!/usr/bin/perl
#
# This script pushes local changes to the remote Git repository
# and sends a message about the push to CIA.vc.
#
# It requires that the VERSION script is in the working directory
# and that the Git tree is tagged so the VERSION script can generate
# version numbers for commits.
#
# This script should be considered to be free for all uses.
#
#####################################################################



# change these parameters if you are using this script for your own project
my $project = "dino";
my $module = "dino";


# Get the user name from Git
my $user = `git config user.name`;
chomp $user;


# Generate a log message with the versions and oneline comments for all
# commits that we are pushing
$logmsg = "";
@branches = split(' ', `ls .git/refs/heads`);
@remote_branches = split(' ', `ls .git/refs/remotes/origin`);
$branchlist = "";
for $branch (@branches) {
  for $remote (@remote_branches) {
    if ($branch eq $remote) {
      $branchlist = $branchlist . " $branch";
    }
  }
}
for $remote (@remote_branches) {
  $branchlist = $branchlist . " ^origin/$remote";
}
@commits = `git rev-list $branchlist`;
for $commit (@commits) {
  chomp $commit;
  $version = `./VERSION $commit`;
  chomp $version;
  $oneline = `git log --no-walk --pretty=format:%s $commit`;
  chomp $oneline;
  $logmsg = $logmsg . "  * $version: $oneline\n";
}
chomp $logmsg;

# if the push command fails, exit without sending the message
if (system('git', 'push') != 0) {
  exit;
}


# The code below is adapted from Petr Baudis's ciabot_cvs.pl


# Compose the RPC message
my $ts = time;

$message = <<EM
<message>
   <generator>
       <name>dpush</name>
       <version>666</version>
   </generator>
   <source>
       <project>$project</project>
       <module>$module</module>
   </source>
   <timestamp>
       $ts
   </timestamp>
   <body>
       <commit>
           <author>$user</author>
           <files>
EM
;

foreach $file (@files) {
  $message .= "              <file>$file</file>\n";
}

$message .= <<EM
           </files>
           <log>
$logmsg
           </log>
       </commit>
   </body>
</message>
EM
;


### Send out the XML-RPC message

#print $message;
#exit;

# We gotta be careful from now on. We silence all the warnings because
# RPC::XML code is crappy and works with undefs etc.
$^W = 0;
$RPC::XML::ERROR if (0); # silence perl's compile-time warning

require RPC::XML;
require RPC::XML::Client;

my $rpc_client = new RPC::XML::Client 'http://cia.vc/RPC2';
my $rpc_request = RPC::XML::request->new('hub.deliver', $message);
my $rpc_response = $rpc_client->send_request($rpc_request);

unless (ref $rpc_response) {
  die "XML-RPC Error: $RPC::XML::ERROR\n";
}


